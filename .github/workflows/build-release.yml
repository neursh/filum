name: Build and Release

on:
  push:
    branches: [main, master]

jobs:
  check-build-trigger:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, '[BUILD')
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Check commit message
        id: check
        run: |
          commit_msg="${{ github.event.head_commit.message }}"
          echo "Commit message: $commit_msg"

          if [[ $commit_msg =~ ^\[BUILD[[:space:]]+([^]]+)\] ]]; then
            version="${BASH_REMATCH[1]}"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "Build triggered for version: $version"
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "No build trigger found in commit message"
          fi

  build:
    needs: check-build-trigger
    if: needs.check-build-trigger.outputs.should-build == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-aarch64-termux
            setup-cross: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
            ext: .exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        if: matrix.setup-cross
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

          # Install cross for easier cross-compilation
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Configure cross-compilation
        if: matrix.setup-cross
        run: |
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-musl]
          linker = "rust-lld"
          EOF

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}

      - name: Build with cross
        if: matrix.setup-cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Build normally
        if: ${{ !matrix.setup-cross }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Get binary name
        id: binary
        shell: bash
        run: |
          # Extract binary name from Cargo.toml
          binary_name=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
          echo "name=$binary_name" >> $GITHUB_OUTPUT

      - name: Prepare artifact
        id: prepare
        shell: bash
        run: |
          binary_name="${{ steps.binary.outputs.name }}"
          target_dir="target/${{ matrix.target }}/release"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            binary_file="$target_dir/${binary_name}.exe"
            artifact_name="${binary_name}-${{ needs.check-build-trigger.outputs.version }}-${{ matrix.name }}.exe"
          else
            binary_file="$target_dir/${binary_name}"
            artifact_name="${binary_name}-${{ needs.check-build-trigger.outputs.version }}-${{ matrix.name }}"
          fi

          cp "$binary_file" "$artifact_name"
          echo "artifact-name=$artifact_name" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare.outputs.artifact-name }}
          path: ${{ steps.prepare.outputs.artifact-name }}

  release:
    needs: [check-build-trigger, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find ./artifacts -type f -exec cp {} ./release-assets/ \;
          ls -la ./release-assets/

      - name: Generate release notes
        id: release-notes
        run: |
          version="${{ needs.check-build-trigger.outputs.version }}"

          # Get the previous tag
          previous_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [[ -n "$previous_tag" ]]; then
            echo "## Changes since $previous_tag" > release_notes.md
            echo "" >> release_notes.md
            
            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" $previous_tag..HEAD >> release_notes.md
          else
            echo "## Changes" > release_notes.md
            echo "" >> release_notes.md
            echo "- Initial release" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## Assets" >> release_notes.md
          echo "" >> release_notes.md
          echo "This release includes binaries for:" >> release_notes.md
          echo "- Linux (x86_64)" >> release_notes.md
          echo "- Linux ARM64 (Termux compatible)" >> release_notes.md
          echo "- Windows (x86_64)" >> release_notes.md
          echo "- macOS (x86_64 and ARM64)" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Termux Installation" >> release_notes.md
          echo "For Termux users, download the \`linux-aarch64-termux\` binary:" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Download the binary (replace URL with actual release URL)" >> release_notes.md
          echo "wget https://github.com/\$USER/\$REPO/releases/download/$version/your-binary-$version-linux-aarch64-termux" >> release_notes.md
          echo "chmod +x your-binary-$version-linux-aarch64-termux" >> release_notes.md
          echo "mv your-binary-$version-linux-aarch64-termux ~/bin/your-binary" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-build-trigger.outputs.version }}
          name: "Release ${{ needs.check-build-trigger.outputs.version }}"
          body_path: release_notes.md
          files: ./release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
